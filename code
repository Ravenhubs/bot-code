import discord
from discord.ext import commands
import random

# Your bot token setup (replace with actual token in production)
TOKEN = 'YOUR_BOT_TOKEN_HERE'

# Create bot instance with necessary intents
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix='/', intents=intents)

# List of bypass role IDs (replace with actual role IDs)
bypass_role_ids = [
    1358385522208411810,  # Replace with actual role ID 1
    987654321098765432,   # Replace with actual role ID 2
    112233445566778899,   # Replace with actual role ID 3
    998877665544332211,   # Replace with actual role ID 4
]

# Function to check if a user has the necessary role to perform the command
def has_permission(interaction, command_role_permission):
    user_roles = [role.id for role in interaction.user.roles]
    bot_role = interaction.guild.me.top_role

    if command_role_permission == "bypass":
        return any(role_id in user_roles for role_id in bypass_role_ids)

    # Checking if the user has a role equal or higher than bot's role or bypass role
    return interaction.user.top_role >= bot_role or any(role_id in user_roles for role_id in bypass_role_ids)

# AFK system
afk_users = {}

# Pickup lines (rizz) lists
smooth_rizz = [
    "Are you gravity? Because you’ve got me falling hard.",
    "You're like a sunrise — breathtaking and impossible to ignore.",
    "Is your name melody? Because you’re stuck in my head.",
]

funny_rizz = [
    "Are you a baker? Because you’ve got the buns.",
    "Are you a cloud? Because you make my day shady in a good way.",
    "Are you a taco? Because I want to wrap you up and never let go.",
]

def get_rizz(rizz_type):
    if rizz_type == "smooth":
        return random.choice(smooth_rizz)
    elif rizz_type == "funny":
        return random.choice(funny_rizz)
    return "Invalid rizz type! Use 'smooth' or 'funny'."

# Command to send a pickup line to a user
@bot.tree.command(name='rizz', description='Send a pickup line to a user')
async def rizz_command(interaction: discord.Interaction, user: discord.Member, rizz_type: str):
    rizz = get_rizz(rizz_type.lower())  
    if "Invalid" in rizz:
        await interaction.response.send_message("Invalid rizz type! Use 'smooth' or 'funny'.", ephemeral=True)
    else:
        await interaction.response.send_message(f"{user.mention}, {rizz}", ephemeral=False)

# AFK command: Set yourself as AFK with an optional reason
@bot.tree.command(name='afk', description='Set yourself as AFK with an optional reason')
async def afk_command(interaction: discord.Interaction, reason: str = "No reason provided."):
    if not has_permission(interaction, "afk"):
        await interaction.response.send_message("No permission.", ephemeral=True)
        return
    afk_users[interaction.user.id] = reason
    await interaction.response.send_message(f"AFK: {reason}", ephemeral=True)

# Event to handle messages when the user comes back from AFK
@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    if message.author.id in afk_users:
        reason = afk_users.pop(message.author.id)
        await message.channel.send(f"Back: {message.author.mention}, AFK reason: {reason}")

    await bot.process_commands(message)

# Command to send a "shut the hell up" message
@bot.tree.command(name='sthu', description='Send a shut the hell up command to a user')
async def sthu_command(interaction: discord.Interaction, user: discord.Member):
    if not has_permission(interaction, "sthu"):
        await interaction.response.send_message("No permission.", ephemeral=True)
        return
    await interaction.response.send_message(f"{user.mention}, Shut the hell up", ephemeral=False)

# Command to kick a user from the server
@bot.tree.command(name='kick', description='Kick a user from the server')
async def kick_command(interaction: discord.Interaction, user: discord.Member, reason: str = None):
    if not has_permission(interaction, "kick"):
        await interaction.response.send_message("No permission.", ephemeral=True)
        return

    if interaction.guild.me.guild_permissions.kick_members:
        try:
            await user.kick(reason=reason)
            await interaction.response.send_message(f'Kicked: {user.mention}', ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("No permission.", ephemeral=True)
        except discord.HTTPException:
            await interaction.response.send_message("Failed to kick.", ephemeral=True)
    else:
        await interaction.response.send_message("No permission.", ephemeral=True)

# Command to ban a user from the server
@bot.tree.command(name='ban', description='Ban a user from the server')
async def ban_command(interaction: discord.Interaction, user: discord.Member, reason: str = None):
    if not has_permission(interaction, "ban"):
        await interaction.response.send_message("No permission.", ephemeral=True)
        return

    if interaction.guild.me.guild_permissions.ban_members:
        try:
            await user.ban(reason=reason)
            await interaction.response.send_message(f'Banned: {user.mention}', ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("No permission.", ephemeral=True)
        except discord.HTTPException:
            await interaction.response.send_message("Failed to ban.", ephemeral=True)
    else:
        await interaction.response.send_message("No permission.", ephemeral=True)

# Command to send a message to a specified channel
@bot.tree.command(name='msg', description='Send a message to a specified channel')
async def msg_command(interaction: discord.Interaction, channel: discord.TextChannel, *, message: str):
    if not has_permission(interaction, "bypass"):
        await interaction.response.send_message("No permission.", ephemeral=True)
        return

    if channel.permissions_for(interaction.guild.me).send_messages:
        try:
            await channel.send(message)
            await interaction.response.send_message(f"Sent: {channel.mention}", ephemeral=True)
        except discord.HTTPException:
            await interaction.response.send_message("Failed to send.", ephemeral=True)
    else:
        await interaction.response.send_message("No permission.", ephemeral=True)

# Command to remove a role from a user
@bot.tree.command(name='role-remove', description='Remove a role from a user')
async def role_remove_command(interaction: discord.Interaction, role: discord.Role, user: discord.Member):
    if not has_permission(interaction, "role-remove"):
        await interaction.response.send_message("No permission.", ephemeral=True)
        return
    if interaction.guild.me.guild_permissions.manage_roles:
        if interaction.guild.me.top_role > role:
            try:
                await user.remove_roles(role)
                await interaction.response.send_message(f"Removed role: {role.name}", ephemeral=True)
            except discord.Forbidden:
                await interaction.response.send_message("No permission.", ephemeral=True)
            except discord.HTTPException:
                await interaction.response.send_message("Failed to remove role.", ephemeral=True)
        else:
            await interaction.response.send_message("Cannot remove this role.", ephemeral=True)
    else:
        await interaction.response.send_message("No permission.", ephemeral=True)

# Command to add a role to a user
@bot.tree.command(name='role-add', description='Add a role to a user')
async def role_add_command(interaction: discord.Interaction, role: discord.Role, user: discord.Member):
    if not has_permission(interaction, "role-add"):
        await interaction.response.send_message("No permission.", ephemeral=True)
        return
    if interaction.guild.me.guild_permissions.manage_roles:
        if interaction.guild.me.top_role > role:
            try:
                await user.add_roles(role)
                await interaction.response.send_message(f"Added role: {role.name}", ephemeral=True)
            except discord.Forbidden:
                await interaction.response.send_message("No permission.", ephemeral=True)
            except discord.HTTPException:
                await interaction.response.send_message("Failed to add role.", ephemeral=True)
        else:
            await interaction.response.send_message("Cannot add this role.", ephemeral=True)
    else:
        await interaction.response.send_message("No permission.", ephemeral=True)

# Command to fetch and display a user's avatar
@bot.tree.command(name='avatar', description="Get a user's avatar")
async def avatar_command(interaction: discord.Interaction, user: discord.Member = None):
    if user is None:
        user = interaction.user  # Default to the user who called the command

    # Fetch the avatar URL of the user
    avatar_url = user.avatar.url if user.avatar else user.default_avatar.url

    # Send the avatar as an embed
    embed = discord.Embed(title=f"{user.name}'s Avatar", color=discord.Color.blurple())
    embed.set_image(url=avatar_url)
    await interaction.response.send_message(embed=embed, ephemeral=False)

# Sync commands when the bot is ready
@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f'Logged in as {bot.user.name}')

# Run the bot with your token
bot.run(TOKEN)
