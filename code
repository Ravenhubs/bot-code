import discord
from discord.ext import commands
import random

#place ur token inside the ' '
#remove the put here and replace with your token
TOKEN = 'put here'  

# Create bot instance with necessary intents
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.members = True

bot = commands.Bot(command_prefix='/', intents=intents)

# Dictionary to store AFK users' reasons
afk_users = {}

# Rizz categories (pickup lines)
smooth_rizz = [
    "Are you gravity? Because you’ve got me falling hard.",
    "You're like a sunrise — breathtaking and impossible to ignore.",
    "Is your name melody? Because you’re stuck in my head.",
    "You must be a poem, 'cause every word about you is beautiful.",
    "Are you the ocean? Because I’m lost in your waves.",
    "You shine brighter than my future.",
    "You must be a compass, 'cause you give my life direction.",
    "Are you a sunset? Because you make every moment golden.",
    "Is your name Google Maps? Because I’m lost in your eyes.",
    "You don’t need keys to unlock my heart.",
    "Are you a magician? Because whenever I look at you, everyone else disappears.",
    "You must be a dictionary, because you add meaning to my life.",
]

funny_rizz = [
    "Are you a baker? Because you’ve got the buns.",
    "Are you a cloud? Because you make my day shady in a good way.",
    "Are you a broom? Because you just swept me off my feet.",
    "Are you lagging? Because you keep freezing me with that look.",
    "Are you a taco? Because I want to wrap you up and never let go.",
    "Are you soup? Because you're hot and comforting.",
    "You must be a clown, 'cause you bring a smile to my face.",
    "Are you Wi-Fi? Because when you're gone, nothing works.",
    "Are you a cat? Because I’m feline a connection.",
    "Are you a banana? Because I find you a-peeling."
]

# Get a random rizz line from the selected category
def get_rizz(rizz_type):
    if rizz_type == "smooth":
        return random.choice(smooth_rizz)
    elif rizz_type == "funny":
        return random.choice(funny_rizz)
    return "Invalid rizz type! Use 'smooth' or 'funny'."

# /rizz command
@bot.tree.command(name='rizz', description='Send a pickup line to a user')
async def rizz_command(interaction: discord.Interaction, user: discord.Member, rizz_type: str):
    rizz = get_rizz(rizz_type.lower())  # Fetch rizz based on type
    if "Invalid" in rizz:
        await interaction.response.send_message("Invalid rizz type! Please use 'smooth' or 'funny'.", ephemeral=True)
    else:
        await interaction.response.send_message(f"{user.mention}, {rizz}", ephemeral=False)

# Function to check if the user has permission to run commands (based on role hierarchy)
def is_user_above_bot(user: discord.Member, guild: discord.Guild):
    bot_member = guild.get_member(bot.user.id)
    if not bot_member:
        return False
    return user.top_role >= bot_member.top_role

# /afk command to set a user as AFK with an optional reason
@bot.tree.command(name='afk', description='Set yourself as AFK with an optional reason')
async def afk_command(interaction: discord.Interaction, reason: str = "No reason provided."):
    afk_users[interaction.user.id] = reason
    await interaction.response.send_message(f"You are now AFK: {reason}", ephemeral=True)

# Responds to AFK users when they return
@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    # Check if the author is AFK
    if message.author.id in afk_users:
        reason = afk_users.pop(message.author.id)  # Remove AFK status
        await message.channel.send(f"Welcome back {message.author.mention}! You were AFK: {reason}")

    await bot.process_commands(message)

# /userafk command to list all users who are AFK
@bot.tree.command(name='userafk', description='View all users who are AFK with reasons')
async def userafk_command(interaction: discord.Interaction):
    if not is_user_above_bot(interaction.user, interaction.guild):
        await interaction.response.send_message("You do not have permission to see AFK users.", ephemeral=True)
        return

    if afk_users:
        afk_list = "\n".join([f"{interaction.guild.get_member(user_id).mention}: {reason}" for user_id, reason in afk_users.items()])
        await interaction.response.send_message(f"Currently AFK users:\n{afk_list}", ephemeral=True)
    else:
        await interaction.response.send_message("No users are currently AFK.", ephemeral=True)

# /sthu command (Shut The H*ck Up command)
@bot.tree.command(name='sthu', description='Make the bot say "sthu" to a user')
async def sthu_command(interaction: discord.Interaction, user: discord.Member):
    await interaction.channel.send(f"Shut the hell up {user.mention}! 🤐")

# /sybau command (Shut Your Beach Az* Up command)
@bot.tree.command(name='sybau', description='Make the bot say "sybau" to a user')
async def sybau_command(interaction: discord.Interaction, user: discord.Member):
    await interaction.channel.send(f"Shut yo beach azz up {user.mention}! 😜")

# /kick command to kick a user from the server
@bot.tree.command(name='kick', description='Kick a user from the server')
async def kick_command(interaction: discord.Interaction, user: discord.Member, reason: str = None):
    if not is_user_above_bot(interaction.user, interaction.guild):
        await interaction.response.send_message("You do not have permission to kick users.", ephemeral=True)
        return

    if interaction.guild.me.guild_permissions.kick_members:
        try:
            await user.kick(reason=reason)
            await interaction.response.send_message(f'Kicked {user.mention} for reason: {reason}', ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("I do not have permission to kick this user.", ephemeral=True)
        except discord.HTTPException:
            await interaction.response.send_message("Failed to kick the user. Please try again.", ephemeral=True)
    else:
        await interaction.response.send_message("I do not have permission to kick members.", ephemeral=True)

# /ban command to ban a user
@bot.tree.command(name='ban', description='Ban a user from the server')
async def ban_command(interaction: discord.Interaction, user: discord.Member, reason: str = None):
    if not is_user_above_bot(interaction.user, interaction.guild):
        await interaction.response.send_message("You do not have permission to ban users.", ephemeral=True)
        return

    if interaction.guild.me.guild_permissions.ban_members:
        try:
            await user.ban(reason=reason)
            await interaction.response.send_message(f'Banned {user.mention} for reason: {reason}', ephemeral=True)
        except discord.Forbidden:
            await interaction.response.send_message("I do not have permission to ban this user.", ephemeral=True)
        except discord.HTTPException:
            await interaction.response.send_message("Failed to ban the user. Please try again.", ephemeral=True)
    else:
        await interaction.response.send_message("I do not have permission to ban members.", ephemeral=True)

# /msg command to send a message to a specific channel
@bot.tree.command(name='msg', description='Send a message to a specified channel')
async def msg_command(interaction: discord.Interaction, channel: discord.TextChannel, *, message: str):
    if not is_user_above_bot(interaction.user, interaction.guild):
        await interaction.response.send_message("You do not have permission to send messages in that channel.", ephemeral=True)
        return

    if channel.permissions_for(interaction.guild.me).send_messages:
        try:
            await channel.send(message)
            await interaction.response.send_message(f"Message sent to {channel.mention}!", ephemeral=True)
        except discord.HTTPException:
            await interaction.response.send_message("Failed to send the message. Please try again.", ephemeral=True)
    else:
        await interaction.response.send_message("I do not have permission to send messages in that channel.", ephemeral=True)

# /role-remove command to remove a role from a user
@bot.tree.command(name='role-remove', description='Remove a role from a user')
async def role_remove_command(interaction: discord.Interaction, role: discord.Role, user: discord.Member):
    if not is_user_above_bot(interaction.user, interaction.guild):
        await interaction.response.send_message("You do not have permission to manage roles.", ephemeral=True)
        return
    if interaction.guild.me.guild_permissions.manage_roles:
        if interaction.guild.me.top_role > role:
            try:
                await user.remove_roles(role)
                await interaction.response.send_message(f"Successfully removed the role {role.name} from {user.mention}!", ephemeral=True)
            except discord.Forbidden:
                await interaction.response.send_message("I do not have permission to manage roles.", ephemeral=True)
            except discord.HTTPException:
                await interaction.response.send_message("Failed to remove the role. Please try again.", ephemeral=True)
        else:
            await interaction.response.send_message("I cannot remove this role because it is higher than my highest role.", ephemeral=True)
    else:
        await interaction.response.send_message("I do not have permission to manage roles.", ephemeral=True)

# /role-add command to add a role to a user
@bot.tree.command(name='role-add', description='Add a role to a user')
async def role_add_command(interaction: discord.Interaction, role: discord.Role, user: discord.Member):
    if not is_user_above_bot(interaction.user, interaction.guild):
        await interaction.response.send_message("You do not have permission to manage roles.", ephemeral=True)
        return
    if interaction.guild.me.guild_permissions.manage_roles:
        if interaction.guild.me.top_role > role:
            try:
                await user.add_roles(role)
                await interaction.response.send_message(f"Successfully added the role {role.name} to {user.mention}!", ephemeral=True)
            except discord.Forbidden:
                await interaction.response.send_message("I do not have permission to manage roles.", ephemeral=True)
            except discord.HTTPException:
                await interaction.response.send_message("Failed to add the role. Please try again.", ephemeral=True)
        else:
            await interaction.response.send_message("I cannot add this role because it is higher than my highest role.", ephemeral=True)
    else:
        await interaction.response.send_message("I do not have permission to manage roles.", ephemeral=True)

# Sync commands when the bot is ready
@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f'Logged in as {bot.user.name}')

# Run the bot with your token
bot.run(TOKEN)
